stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  USER_SERVICE_IMAGE: "${DOCKER_HUB_IMAGE}/user-service"
  PRODUCT_SERVICE_IMAGE: "${DOCKER_HUB_IMAGE}/product-service"
  ORDER_SERVICE_IMAGE: "${DOCKER_HUB_IMAGE}/order-service"
  REGISTRY: "docker.io"

before_script:
  - docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD" $REGISTRY

build_docker_images:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t ${USER_SERVICE_IMAGE} -f ./user-service/Dockerfile.user ./user-service
    - docker build -t ${PRODUCT_SERVICE_IMAGE} -f ./product-service/Dockerfile.product ./product-service
    - docker build -t ${ORDER_SERVICE_IMAGE} -f ./order-service/Dockerfile.order ./order-service
    - docker push ${USER_SERVICE_IMAGE}
    - docker push ${PRODUCT_SERVICE_IMAGE}
    - docker push ${ORDER_SERVICE_IMAGE}

test_user_service:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker run --rm ${USER_SERVICE_IMAGE} npm install
    - docker run --rm ${USER_SERVICE_IMAGE} npm test

test_product_service:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker run --rm ${PRODUCT_SERVICE_IMAGE} npm install
    - docker run --rm ${PRODUCT_SERVICE_IMAGE} npm test

test_order_service:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker run --rm ${ORDER_SERVICE_IMAGE} npm install
    - docker run --rm ${ORDER_SERVICE_IMAGE} npm test

deploy_to_staging:
  stage: deploy
  image: docker/compose:latest
  services:
    - docker:dind
  script:
    - docker-compose -f docker-compose.yml up -d
  only:
    - main